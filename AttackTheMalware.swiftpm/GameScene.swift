import SpriteKit
import Foundation

class GameScene : SKScene{
    
    let background1 = SKSpriteNode(imageNamed: "background1")
    let background2 = SKSpriteNode(imageNamed: "background2")
    let background3 = SKSpriteNode(imageNamed: "background3")
    let background4 = SKSpriteNode(imageNamed: "background4")
    let room = SKSpriteNode(imageNamed: "room")
    let monitor = SKSpriteNode(imageNamed: "monitor")
    let buttonForward = SKSpriteNode(imageNamed: "buttonForward")
    let buttonReverse = SKSpriteNode(imageNamed: "buttonReverse")
    
    var enemy = SKSpriteNode()
    
    var score = 0
    var currentPage = 1
    var randNum = Int.random(in: 10...20)
    
    override func didMove(to view: SKView) {
        
        scene?.size = CGSize(width: 2048, height: 1536)

        MusicPlayer.shared.startBackgroundMusic()
        
        addBack1()
        addButtonForward()
        addButtonReverse()
        
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        for touch in touches {
            let location = touch.location(in: self)
            let touchedNode = atPoint(location)
            
            if currentPage == 1{
                if touchedNode.name == "buttonForward"{
                    addBack2()
                    currentPage = 2
                    background1.removeFromParent()
                }
            } else if currentPage == 2{
                if touchedNode.name == "buttonForward"{
                    addBack3()
                    currentPage = 3
                    background2.removeFromParent()
                } else if touchedNode.name == "buttonReverse"{
                    addBack1()
                    currentPage = 1
                    background2.removeFromParent()
                }
            } else if currentPage == 3{
                if touchedNode.name == "buttonForward"{
                    addRoom()
                    addMonitor()
                    currentPage = 4
                    background2.removeFromParent()
                    buttonForward.removeFromParent()
                    buttonReverse.removeFromParent()
                    for _ in 1...randNum{
                        addEnemy()
                    }
                } else if touchedNode.name == "buttonReverse"{
                    addBack2()
                    currentPage = 2
                    background3.removeFromParent()
                }
            } else if currentPage == 4{
                checkScore()
                self.removeAction(forKey: "spawnEnemy")
                if touchedNode.name == "enemy" {
                    removeEnemy(node: touchedNode as! SKSpriteNode)
                }
            }
        }
    }
    
    func addEnemy(){
        enemy = SKSpriteNode(imageNamed: "virus")
        enemy.name = "enemy"
        enemy.physicsBody = SKPhysicsBody(circleOfRadius: enemy.frame.size.width/2)
        enemy.physicsBody?.isDynamic = false
        enemy.position = CGPoint(x: random(min: 150, max: 1850), y: random(min: 400, max: 1200))
        enemy.zPosition = 1
        addChild(enemy)
    }
    
    func removeEnemy(node : SKSpriteNode) -> SKSpriteNode{
        if let emitterEnemy = SKEmitterNode(fileNamed: "Fire"){
            emitterEnemy.position = node.position
            addChild(emitterEnemy)
        }
        node.removeFromParent()
        score += 1
        return node
    }
    
    
    func checkScore(){
        if score == randNum - 1{
            addWinView()
        }
    }
    
    func addBack1(){
        background1.position = CGPoint(x: size.width/2, y: size.height/2)
        background1.zPosition = -1
        background1.setScale(1.5)
        background1.name = "background1"
        addChild(background1)
    }
    
    func addBack2(){
        background2.position = CGPoint(x: size.width/2, y: size.height/2)
        background2.zPosition = -1
        background2.setScale(1.5)
        background2.name = "background2"
        addChild(background2)
    }
    
    func addBack3(){
        background3.position = CGPoint(x: size.width/2, y: size.height/2)
        background3.zPosition = -1
        background3.setScale(1.5)
        background3.name = "background3"
        addChild(background3)
    }
    
    func addRoom(){
        room.zPosition = -1
        room.position = CGPoint(x: size.width/2, y: size.height/2)
        room.name = "room"
        room.setScale(2)
        addChild(room)
    }
    
    func addMonitor(){
        monitor.name = "monitor"
        monitor.position = CGPoint(x: size.width/2, y: size.height/2)
        monitor.setScale(1.6)
        addChild(monitor)
    }
    
    func addWinView(){
        monitor.removeFromParent()
        room.removeFromParent()
        background4.zPosition = -1
        background4.name = "winview"
        background4.position = CGPoint(x: size.width/2, y: size.height/2)
        background4.setScale(2)
        addChild(background4)
    }
    
    func addButtonReverse(){
        buttonReverse.position = CGPoint(x: 150, y: 150)
        buttonReverse.name = "buttonReverse"
        addChild(buttonReverse)
    }
    
    func addButtonForward(){
        buttonForward.position = CGPoint(x: 1900, y: 150)
        buttonForward.name = "buttonForward"
        addChild(buttonForward)
    }
    
    func deleteButtonReverse(){
        buttonReverse.removeFromParent()
    }
    
    func deleteButtonForward(){
        buttonForward.removeFromParent()
    }
    
    func random() -> CGFloat {
        return CGFloat(Float(arc4random()) / Float(UInt32.max))
    }
    func random(min: CGFloat, max: CGFloat) -> CGFloat {
        assert(min < max)
        return random() * (max - min) + min
    }
    
}
